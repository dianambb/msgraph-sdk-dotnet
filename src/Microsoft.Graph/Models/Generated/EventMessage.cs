// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.


namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type Event Message.
    /// </summary>
    [DataContract]
    public partial class EventMessage : Message
    {
    
        /// <summary>
        /// Gets or sets meeting message type.
        /// </summary>
        [DataMember(Name = "meetingMessageType", EmitDefaultValue = false, IsRequired = false)]
        public MeetingMessageType? MeetingMessageType { get; set; }
    
        /// <summary>
        /// Gets or sets start date time.
        /// </summary>
        [DataMember(Name = "startDateTime", EmitDefaultValue = false, IsRequired = false)]
        public DateTimeTimeZone StartDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets end date time.
        /// </summary>
        [DataMember(Name = "endDateTime", EmitDefaultValue = false, IsRequired = false)]
        public DateTimeTimeZone EndDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets location.
        /// </summary>
        [DataMember(Name = "location", EmitDefaultValue = false, IsRequired = false)]
        public Location Location { get; set; }
    
        /// <summary>
        /// Gets or sets type.
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false, IsRequired = false)]
        public EventType? Type { get; set; }
    
        /// <summary>
        /// Gets or sets recurrence.
        /// </summary>
        [DataMember(Name = "recurrence", EmitDefaultValue = false, IsRequired = false)]
        public PatternedRecurrence Recurrence { get; set; }
    
        /// <summary>
        /// Gets or sets is out of date.
        /// </summary>
        [DataMember(Name = "isOutOfDate", EmitDefaultValue = false, IsRequired = false)]
        public bool? IsOutOfDate { get; set; }
    
        /// <summary>
        /// Gets or sets event.
        /// </summary>
        [DataMember(Name = "event", EmitDefaultValue = false, IsRequired = false)]
        public Event Event { get; set; }
    
    }
}

