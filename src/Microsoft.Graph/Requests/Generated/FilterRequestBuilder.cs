// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.


namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;

    /// <summary>
    /// The type FilterRequestBuilder.
    /// </summary>
    public partial class FilterRequestBuilder : EntityRequestBuilder, IFilterRequestBuilder
    {

        /// <summary>
        /// Constructs a new FilterRequestBuilder.
        /// </summary>
        /// <param name="requestUrl">The URL for the built request.</param>
        /// <param name="client">The <see cref="IBaseClient"/> for handling requests.</param>
        public FilterRequestBuilder(
            string requestUrl,
            IBaseClient client)
            : base(requestUrl, client)
        {
        }

        /// <summary>
        /// Builds the request.
        /// </summary>
        /// <returns>The built request.</returns>
        public new IFilterRequest Request()
        {
            return this.Request(null);
        }

        /// <summary>
        /// Builds the request.
        /// </summary>
        /// <param name="options">The query and header options for the request.</param>
        /// <returns>The built request.</returns>
        public new IFilterRequest Request(IEnumerable<Option> options)
        {
            return new FilterRequest(this.RequestUrl, this.Client, options);
        }
    
        /// <summary>
        /// Gets the request builder for FilterApply.
        /// </summary>
        /// <returns>The <see cref="IFilterApplyRequestBuilder"/>.</returns>
        public IFilterApplyRequestBuilder Apply(
            FilterCriteria criteria = null)
        {
            return new FilterApplyRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.apply"),
                this.Client,
                criteria);
        }

        /// <summary>
        /// Gets the request builder for FilterApplyBottomItemsFilter.
        /// </summary>
        /// <returns>The <see cref="IFilterApplyBottomItemsFilterRequestBuilder"/>.</returns>
        public IFilterApplyBottomItemsFilterRequestBuilder ApplyBottomItemsFilter(
            Int32 count)
        {
            return new FilterApplyBottomItemsFilterRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.applyBottomItemsFilter"),
                this.Client,
                count);
        }

        /// <summary>
        /// Gets the request builder for FilterApplyBottomPercentFilter.
        /// </summary>
        /// <returns>The <see cref="IFilterApplyBottomPercentFilterRequestBuilder"/>.</returns>
        public IFilterApplyBottomPercentFilterRequestBuilder ApplyBottomPercentFilter(
            Int32 percent)
        {
            return new FilterApplyBottomPercentFilterRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.applyBottomPercentFilter"),
                this.Client,
                percent);
        }

        /// <summary>
        /// Gets the request builder for FilterApplyCellColorFilter.
        /// </summary>
        /// <returns>The <see cref="IFilterApplyCellColorFilterRequestBuilder"/>.</returns>
        public IFilterApplyCellColorFilterRequestBuilder ApplyCellColorFilter(
            string color = null)
        {
            return new FilterApplyCellColorFilterRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.applyCellColorFilter"),
                this.Client,
                color);
        }

        /// <summary>
        /// Gets the request builder for FilterApplyCustomFilter.
        /// </summary>
        /// <returns>The <see cref="IFilterApplyCustomFilterRequestBuilder"/>.</returns>
        public IFilterApplyCustomFilterRequestBuilder ApplyCustomFilter(
            string oper,
            string criteria1 = null,
            string criteria2 = null)
        {
            return new FilterApplyCustomFilterRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.applyCustomFilter"),
                this.Client,
                oper,
                criteria1,
                criteria2);
        }

        /// <summary>
        /// Gets the request builder for FilterApplyDynamicFilter.
        /// </summary>
        /// <returns>The <see cref="IFilterApplyDynamicFilterRequestBuilder"/>.</returns>
        public IFilterApplyDynamicFilterRequestBuilder ApplyDynamicFilter(
            string criteria)
        {
            return new FilterApplyDynamicFilterRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.applyDynamicFilter"),
                this.Client,
                criteria);
        }

        /// <summary>
        /// Gets the request builder for FilterApplyFontColorFilter.
        /// </summary>
        /// <returns>The <see cref="IFilterApplyFontColorFilterRequestBuilder"/>.</returns>
        public IFilterApplyFontColorFilterRequestBuilder ApplyFontColorFilter(
            string color = null)
        {
            return new FilterApplyFontColorFilterRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.applyFontColorFilter"),
                this.Client,
                color);
        }

        /// <summary>
        /// Gets the request builder for FilterApplyIconFilter.
        /// </summary>
        /// <returns>The <see cref="IFilterApplyIconFilterRequestBuilder"/>.</returns>
        public IFilterApplyIconFilterRequestBuilder ApplyIconFilter(
            Icon icon = null)
        {
            return new FilterApplyIconFilterRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.applyIconFilter"),
                this.Client,
                icon);
        }

        /// <summary>
        /// Gets the request builder for FilterApplyTopItemsFilter.
        /// </summary>
        /// <returns>The <see cref="IFilterApplyTopItemsFilterRequestBuilder"/>.</returns>
        public IFilterApplyTopItemsFilterRequestBuilder ApplyTopItemsFilter(
            Int32 count)
        {
            return new FilterApplyTopItemsFilterRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.applyTopItemsFilter"),
                this.Client,
                count);
        }

        /// <summary>
        /// Gets the request builder for FilterApplyTopPercentFilter.
        /// </summary>
        /// <returns>The <see cref="IFilterApplyTopPercentFilterRequestBuilder"/>.</returns>
        public IFilterApplyTopPercentFilterRequestBuilder ApplyTopPercentFilter(
            Int32 percent)
        {
            return new FilterApplyTopPercentFilterRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.applyTopPercentFilter"),
                this.Client,
                percent);
        }

        /// <summary>
        /// Gets the request builder for FilterApplyValuesFilter.
        /// </summary>
        /// <returns>The <see cref="IFilterApplyValuesFilterRequestBuilder"/>.</returns>
        public IFilterApplyValuesFilterRequestBuilder ApplyValuesFilter(
            Newtonsoft.Json.Linq.JToken values = null)
        {
            return new FilterApplyValuesFilterRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.applyValuesFilter"),
                this.Client,
                values);
        }

        /// <summary>
        /// Gets the request builder for FilterClear.
        /// </summary>
        /// <returns>The <see cref="IFilterClearRequestBuilder"/>.</returns>
        public IFilterClearRequestBuilder Clear()
        {
            return new FilterClearRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.clear"),
                this.Client);
        }
    
    }
}
