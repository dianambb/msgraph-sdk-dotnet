// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.


namespace Microsoft.Graph
{
    using System;
    using System.IO;
    using System.Net.Http;
    using System.Threading;

    /// <summary>
    /// The interface IDirectorySettingTemplateRequest.
    /// </summary>
    public partial interface IDirectorySettingTemplateRequest : IBaseRequest
    {
        /// <summary>
        /// Creates the specified DirectorySettingTemplate using PUT.
        /// </summary>
        /// <param name="directorySettingTemplateToCreate">The DirectorySettingTemplate to create.</param>
        /// <returns>The created DirectorySettingTemplate.</returns>
        System.Threading.Tasks.Task<DirectorySettingTemplate> CreateAsync(DirectorySettingTemplate directorySettingTemplateToCreate);        /// <summary>
        /// Creates the specified DirectorySettingTemplate using PUT.
        /// </summary>
        /// <param name="directorySettingTemplateToCreate">The DirectorySettingTemplate to create.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The created DirectorySettingTemplate.</returns>
        System.Threading.Tasks.Task<DirectorySettingTemplate> CreateAsync(DirectorySettingTemplate directorySettingTemplateToCreate, CancellationToken cancellationToken);

        /// <summary>
        /// Deletes the specified DirectorySettingTemplate.
        /// </summary>
        /// <returns>The task to await.</returns>
        System.Threading.Tasks.Task DeleteAsync();

        /// <summary>
        /// Deletes the specified DirectorySettingTemplate.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task to await.</returns>
        System.Threading.Tasks.Task DeleteAsync(CancellationToken cancellationToken);

        /// <summary>
        /// Gets the specified DirectorySettingTemplate.
        /// </summary>
        /// <returns>The DirectorySettingTemplate.</returns>
        System.Threading.Tasks.Task<DirectorySettingTemplate> GetAsync();

        /// <summary>
        /// Gets the specified DirectorySettingTemplate.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The DirectorySettingTemplate.</returns>
        System.Threading.Tasks.Task<DirectorySettingTemplate> GetAsync(CancellationToken cancellationToken);

        /// <summary>
        /// Updates the specified DirectorySettingTemplate using PATCH.
        /// </summary>
        /// <param name="directorySettingTemplateToUpdate">The DirectorySettingTemplate to update.</param>
        /// <returns>The updated DirectorySettingTemplate.</returns>
        System.Threading.Tasks.Task<DirectorySettingTemplate> UpdateAsync(DirectorySettingTemplate directorySettingTemplateToUpdate);

        /// <summary>
        /// Updates the specified DirectorySettingTemplate using PATCH.
        /// </summary>
        /// <param name="directorySettingTemplateToUpdate">The DirectorySettingTemplate to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The updated DirectorySettingTemplate.</returns>
        System.Threading.Tasks.Task<DirectorySettingTemplate> UpdateAsync(DirectorySettingTemplate directorySettingTemplateToUpdate, CancellationToken cancellationToken);

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="value">The select value.</param>
        /// <returns>The request object to send.</returns>
        IDirectorySettingTemplateRequest Select(string value);

    }
}
