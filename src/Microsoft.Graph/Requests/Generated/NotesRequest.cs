// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.


namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Net.Http;
    using System.Threading;

    /// <summary>
    /// The type NotesRequest.
    /// </summary>
    public partial class NotesRequest : BaseRequest, INotesRequest
    {
        /// <summary>
        /// Constructs a new NotesRequest.
        /// </summary>
        /// <param name="requestUrl">The URL for the built request.</param>
        /// <param name="client">The <see cref="IBaseClient"/> for handling requests.</param>
        /// <param name="options">Query and header option name value pairs for the request.</param>
        public NotesRequest(
            string requestUrl,
            IBaseClient client,
            IEnumerable<Option> options)
            : base(requestUrl, client, options)
        {
        }

        /// <summary>
        /// Creates the specified Notes using PUT.
        /// </summary>
        /// <param name="notesToCreate">The Notes to create.</param>
        /// <returns>The created Notes.</returns>
        public System.Threading.Tasks.Task<Notes> CreateAsync(Notes notesToCreate)
        {
            return this.CreateAsync(notesToCreate, CancellationToken.None);
        }

        /// <summary>
        /// Creates the specified Notes using PUT.
        /// </summary>
        /// <param name="notesToCreate">The Notes to create.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The created Notes.</returns>
        public async System.Threading.Tasks.Task<Notes> CreateAsync(Notes notesToCreate, CancellationToken cancellationToken)
        {
            this.ContentType = "application/json";
            this.Method = "PUT";
            var newEntity = await this.SendAsync<Notes>(notesToCreate, cancellationToken).ConfigureAwait(false);
            this.InitializeCollectionProperties(newEntity);
            return newEntity;
        }

        /// <summary>
        /// Deletes the specified Notes.
        /// </summary>
        /// <returns>The task to await.</returns>
        public System.Threading.Tasks.Task DeleteAsync()
        {
            return this.DeleteAsync(CancellationToken.None);
        }

        /// <summary>
        /// Deletes the specified Notes.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task to await.</returns>
        public async System.Threading.Tasks.Task DeleteAsync(CancellationToken cancellationToken)
        {
            this.Method = "DELETE";
            await this.SendAsync<Notes>(null, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the specified Notes.
        /// </summary>
        /// <returns>The Notes.</returns>
        public System.Threading.Tasks.Task<Notes> GetAsync()
        {
            return this.GetAsync(CancellationToken.None);
        }

        /// <summary>
        /// Gets the specified Notes.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The Notes.</returns>
        public async System.Threading.Tasks.Task<Notes> GetAsync(CancellationToken cancellationToken)
        {
            this.Method = "GET";
            var retrievedEntity = await this.SendAsync<Notes>(null, cancellationToken).ConfigureAwait(false);
            this.InitializeCollectionProperties(retrievedEntity);
            return retrievedEntity;
        }

        /// <summary>
        /// Updates the specified Notes using PATCH.
        /// </summary>
        /// <param name="notesToUpdate">The Notes to update.</param>
        /// <returns>The updated Notes.</returns>
        public System.Threading.Tasks.Task<Notes> UpdateAsync(Notes notesToUpdate)
        {
            return this.UpdateAsync(notesToUpdate, CancellationToken.None);
        }

        /// <summary>
        /// Updates the specified Notes using PATCH.
        /// </summary>
        /// <param name="notesToUpdate">The Notes to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The updated Notes.</returns>
        public async System.Threading.Tasks.Task<Notes> UpdateAsync(Notes notesToUpdate, CancellationToken cancellationToken)
        {
            this.ContentType = "application/json";
            this.Method = "PATCH";
            var updatedEntity = await this.SendAsync<Notes>(notesToUpdate, cancellationToken).ConfigureAwait(false);
            this.InitializeCollectionProperties(updatedEntity);
            return updatedEntity;
        }

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="value">The expand value.</param>
        /// <returns>The request object to send.</returns>
        public INotesRequest Expand(string value)
        {
            this.QueryOptions.Add(new QueryOption("$expand", value));
            return this;
        }

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="value">The select value.</param>
        /// <returns>The request object to send.</returns>
        public INotesRequest Select(string value)
        {
            this.QueryOptions.Add(new QueryOption("$select", value));
            return this;
        }

        /// <summary>
        /// Initializes any collection properties after deserialization, like next requests for paging.
        /// </summary>
        /// <param name="notesToInitialize">The <see cref="Notes"/> with the collection properties to initialize.</param>
        private void InitializeCollectionProperties(Notes notesToInitialize)
        {

            if (notesToInitialize != null && notesToInitialize.AdditionalData != null)
            {

                if (notesToInitialize.Notebooks != null && notesToInitialize.Notebooks.CurrentPage != null)
                {
                    notesToInitialize.Notebooks.AdditionalData = notesToInitialize.AdditionalData;

                    object nextPageLink;
                    notesToInitialize.AdditionalData.TryGetValue("notebooks@odata.nextLink", out nextPageLink);
                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        notesToInitialize.Notebooks.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }

            }


        }
    }
}
