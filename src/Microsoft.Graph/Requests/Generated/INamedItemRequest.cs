// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.


namespace Microsoft.Graph
{
    using System;
    using System.IO;
    using System.Net.Http;
    using System.Threading;

    /// <summary>
    /// The interface INamedItemRequest.
    /// </summary>
    public partial interface INamedItemRequest : IBaseRequest
    {
        /// <summary>
        /// Creates the specified NamedItem using PUT.
        /// </summary>
        /// <param name="namedItemToCreate">The NamedItem to create.</param>
        /// <returns>The created NamedItem.</returns>
        System.Threading.Tasks.Task<NamedItem> CreateAsync(NamedItem namedItemToCreate);        /// <summary>
        /// Creates the specified NamedItem using PUT.
        /// </summary>
        /// <param name="namedItemToCreate">The NamedItem to create.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The created NamedItem.</returns>
        System.Threading.Tasks.Task<NamedItem> CreateAsync(NamedItem namedItemToCreate, CancellationToken cancellationToken);

        /// <summary>
        /// Deletes the specified NamedItem.
        /// </summary>
        /// <returns>The task to await.</returns>
        System.Threading.Tasks.Task DeleteAsync();

        /// <summary>
        /// Deletes the specified NamedItem.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task to await.</returns>
        System.Threading.Tasks.Task DeleteAsync(CancellationToken cancellationToken);

        /// <summary>
        /// Gets the specified NamedItem.
        /// </summary>
        /// <returns>The NamedItem.</returns>
        System.Threading.Tasks.Task<NamedItem> GetAsync();

        /// <summary>
        /// Gets the specified NamedItem.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The NamedItem.</returns>
        System.Threading.Tasks.Task<NamedItem> GetAsync(CancellationToken cancellationToken);

        /// <summary>
        /// Updates the specified NamedItem using PATCH.
        /// </summary>
        /// <param name="namedItemToUpdate">The NamedItem to update.</param>
        /// <returns>The updated NamedItem.</returns>
        System.Threading.Tasks.Task<NamedItem> UpdateAsync(NamedItem namedItemToUpdate);

        /// <summary>
        /// Updates the specified NamedItem using PATCH.
        /// </summary>
        /// <param name="namedItemToUpdate">The NamedItem to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The updated NamedItem.</returns>
        System.Threading.Tasks.Task<NamedItem> UpdateAsync(NamedItem namedItemToUpdate, CancellationToken cancellationToken);

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="value">The expand value.</param>
        /// <returns>The request object to send.</returns>
        INamedItemRequest Expand(string value);

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="value">The select value.</param>
        /// <returns>The request object to send.</returns>
        INamedItemRequest Select(string value);

    }
}
